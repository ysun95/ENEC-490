#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 28 14:07:28 2017

@author: YS
"""
from __future__ import division
import matplotlib.pyplot as plt
import pandas as pd 
import numpy as np
from sklearn import linear_model
from sklearn.metrics import mean_squared_error as mse

df_data = pd.read_excel('peak_forecasting.xlsx',sheetname = 'RegressionData')
df_data1 = pd.read_excel('peak_forecasting.xlsx', sheetname = 'HistoricalTemps')
df_data2 = pd.read_excel('peak_forecasting.xlsx', sheetname = 'Predictions')
df_data.columns = ('year','demand','econ','pop','eff','temp')
df_data1.columns= ('date', 'temp')
df_data2.columns= ('year', 'econ','pop', 'consump')

training = df_data.loc[0:8,:]
validation = df_data.loc[9:,:]

y = training.loc[:,'demand']
X = training.loc[:,'econ':'temp']

# Create linear regression object
regr_training = linear_model.LinearRegression()

# Train the model using the training sets
regr_training.fit(X,y)
coeff = regr_training.coef_
inter = regr_training.intercept_

# Make predictions using the testing set

# actual
actual = validation.loc[:,'demand']

X_val = validation.loc[:,'econ':'temp']
predicted = regr_training.predict(X_val)

# scatterplot
plt.figure()
plt.scatter(actual,predicted)
plt.xlabel('Actual Peak Demand (MWh)',fontsize=10)
plt.ylabel('Predicted Peak Demand (MWh)',fontsize=10)

# Residuals
residuals = predicted - actual

# RMSE
RMSE = np.sqrt((np.sum((residuals*residuals))/len(residuals)))
RMSE2 = np.sqrt(mse(actual,predicted))

years = int(np.floor(len(df_data1)/365))

#Find hottest days in a year
annual_peak = []
for i in range(0, years):
    annual = df_data1.loc[i*365:i*365+364,'temp']
    annual_peak = np.append(annual_peak,np.max(annual))
    
mu_hist = np.mean(annual_peak)
std_hist=np.std(annual_peak)

weather_sample = mu_hist + std_hist*np.random.randn(1000,1)

coeff=regr_training.coef_
inter = regr_training.intercept_
demand_simulation = inter + coeff[0]*1.8 + coeff[1]*5.32 + coeff[2]*0.87 + coeff[3]*weather_sample
RM = ((25000-demand_simulation)/25000)*100

plt.figure()
plt.hist(RM)
